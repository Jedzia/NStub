<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<NDepend AppName="NStub">
  <OutputDir KeepHistoric="True" KeepXmlFiles="True">C:\Documents and Settings\Administrator\My Documents\NStub\Solution Items\NDependOut</OutputDir>
  <Dirs>
    <Dir>C:\Documents and Settings\Administrator\My Documents\NStub\NStubCore\bin\Debug</Dir>
    <Dir>C:\Documents and Settings\Administrator\My Documents\NStub\NStubGui\bin\Debug</Dir>
    <Dir>C:\Documents and Settings\Administrator\My Documents\NStub\TestHarness\bin\Debug</Dir>
    <Dir>C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727</Dir>
  </Dirs>
  <Assemblies>
    <Name Warn="True">NStub.Core</Name>
    <Name Warn="True">NStub.Gui</Name>
    <Name Warn="True">TestHarness</Name>
  </Assemblies>
  <FrameworkAssemblies>
    <Name>mscorlib</Name>
    <Name>System</Name>
    <Name>System.Xml</Name>
    <Name>System.Windows.Forms</Name>
    <Name>System.Drawing</Name>
  </FrameworkAssemblies>
  <Report>
    <Section Enabled="True">Application Metrics</Section>
    <Section Enabled="True">Assemblies Metrics</Section>
    <Section Enabled="True">VisualNDepend View</Section>
    <Section Enabled="True">Assemblies Abstractness vs. Instability</Section>
    <Section Enabled="True">Assemblies Dependencies</Section>
    <Section Enabled="True">Assemblies Dependencies Diagram</Section>
    <Section Enabled="True">Assemblies build order</Section>
    <Section Enabled="True">NDepend information and warnings</Section>
    <Section Enabled="True">CQL Queries and Constraints</Section>
    <Section Enabled="True">Types Metrics</Section>
    <Section Enabled="False">Types Dependencies</Section>
  </Report>
  <WarnFilter WarnNotUsedType="True" WarnNotUsedMember="True" WarnTypeVisibility="False" WarnPropertiesVisibility="False" WarnMethodsVisibility="False" WarnConstructorsVisibility="False" WarnFieldsVisibility="False" WarnEventsVisibility="False" WarnAssemblyVersioningIssues="True" WarnPDBIssues="True" /><CQLQueries>
   
    <CQLGroup Name="Source Code Quality constraints" Active="True">
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">WARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE NbLinesOfCode &gt; 30 ORDER BY NbLinesOfCode DESC\r\n// METHODS WHERE NbLinesOfCode &gt; 30 are extremely complex and \r\n// should be split in smaller methods \r\n// (except if they are automatically generated by a tool).</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">WARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE CyclomaticComplexity &gt; 20 ORDER BY CyclomaticComplexity DESC\r\n// METHODS WHERE CyclomaticComplexity &gt; 15 are hard to understand and maintain.\r\n// METHODS WHERE CyclomaticComplexity &gt; 30 are extremely complex and should be split \r\n// in smaller methods (except if they are automatically generated by a tool).</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">WARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE PercentageComment &lt; 20 AND NbLinesOfCode > 10  ORDER BY PercentageComment ASC\r\n// METHODS WHERE %Comment &lt; 20 and that have at least 10 lines of code should be more commented.\r\n// Refer to NbLinesOfComment documentation to understand how PercentageComment is computed.</CQLQuery>
    </CQLGroup>
    <CQLGroup Name="Code Quality constraints" Active="True">
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">WARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE NbILInstructions &gt; 200 ORDER BY NbILInstructions DESC\r\n// METHODS WHERE NbILInstructions &gt; 200 are extremely complex and \r\n// should be split in smaller methods \r\n// (except if they are automatically generated by a tool).</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">WARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE ILCyclomaticComplexity &gt; 40 ORDER BY ILCyclomaticComplexity DESC\r\n// METHODS WHERE ILCyclomaticComplexity &gt; 20 are hard to understand and maintain.\r\n// METHODS WHERE ILCyclomaticComplexity &gt; 40 are extremely complex and should be split \r\n// in smaller methods (except if they are automatically generated by a tool).</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">WARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE NbParameters &gt; 5 ORDER BY NbParameters DESC\r\n// METHODS WHERE NbParameters &gt; 5 might be painful to call and might degrade performance. \r\n// You should prefer using additional properties/fields to the declaring type to handle \r\n// numerous states. Another alternative is to provide a class or structure dedicated to \r\n// handle arguments passing (for example see the class System.Diagnostics.ProcessStartInfo \r\n// and the method System.Diagnostics.Process.Start(ProcessStartInfo))</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">WARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE NbVariables &gt; 15 ORDER BY NbVariables DESC\r\n// METHODS WHERE NbVariables &gt; 8 are hard to understand and maintain.\r\n// METHODS WHERE NbVariables &gt; 15 are extremely complex and should be split in \r\n// smaller methods (except if they are automatically generated by a tool).</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">WARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE NbMethods &gt; 20 ORDER BY NbMethods DESC\r\n// TYPES WHERE NbMethods &gt; 20 might be hard to understand and maintain \r\n// but there might be cases where it is relevant to have a high value for NbMethods. \r\n// For example, the System.Windows.Forms.DataGridView standard class has more than 1000 methods.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">WARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE NbFields &gt; 20 AND !IsEnumeration ORDER BY NbFields DESC\r\n// TYPES WHERE NbFields &gt; 20 AND !IsEnumeration might be hard to understand and maintain \r\n// but there might be cases where it is relevant to have a high value for NbFields. \r\n// For example, the System.Windows.Forms.Control standard class has more than 200 fields. \r\n// The value of the metric SizeOfInst might be a better indicator of complex type.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">WARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE \r\n     (  NbILInstructions &gt; 200 OR \r\n        ILCyclomaticComplexity &gt; 50 OR \r\n        NbParameters &gt; 5 OR \r\n        NbVariables &gt; 8) \r\n     AND \r\n// Here is a way to avoid to take account of generated methods.\r\n// Another way would be to use the SELECT METHODS FROM or SELECT METHODS OUT OF facilities.\r\n     !( NameLike "InitializeComponent" OR NameLike "Generated") </CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">WARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE LCOM &gt; 0.8 AND NbFields &gt; 10 AND NbMethods &gt;10 ORDER BY LCOM DESC\r\n// TYPES WHERE LCOM &gt; 0.8 AND NbFields &gt; 10 AND NbMethods &gt;10 might be problematic. \r\n// However, it is very hard to avoid such non-cohesive types. The LCOMHS metric\r\n// is often considered as more efficient to detect non-cohesive types.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">WARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE LCOMHS &gt; 0.95 AND NbFields &gt; 10 AND NbMethods &gt;10 ORDER BY LCOMHS DESC\r\n// TYPES WHERE LCOMHS &gt; 1.0 AND NbFields &gt; 10 AND NbMethods &gt;10 should be avoided. \r\n// Note that this constraint is stronger than the constraint \r\n// TYPES WHERE LCOM &gt; 0.8 AND NbFields &gt; 10 AND NbMethods &gt;10. </CQLQuery>
     </CQLGroup>
    <CQLGroup Name="Performance constraints" Active="True">
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">WARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE SizeOfInst &gt; 64 ORDER BY SizeOfInst DESC\r\n// TYPES WHERE SizeOfInst &gt; 64 might degrade performance (depending on the number of \r\n// instances created at runtime) and might be hard to maintain. \r\n// However it is not a rule since sometime there is no alternative \r\n// (the size of instances of the System.Net.NetworkInformation.SystemIcmpV6Statistics \r\n// standard class is 2064 bytes).</CQLQuery>
      <CQLQuery Active="True" DisplayList="False" DisplayStat="True">WARN IF Percentage &gt; 5 IN SELECT METHODS WHERE IsUsingBoxing OR IsUsingUnboxing \r\n// Thanks to generics, boxing and unboxing should be rare.</CQLQuery>
      <CQLQuery Active="True" DisplayList="False" DisplayStat="True">WARN IF Percentage &gt; 5 IN SELECT TYPES WHERE IsUsingBoxing OR IsUsingUnboxing \r\n// Thanks to generics, boxing and unboxing should be rare.</CQLQuery>
    </CQLGroup>
    <CQLGroup Name="Design constraints" Active="True">
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">WARN IF Count &gt; 0 IN SELECT TOP 10 ASSEMBLIES WHERE ContainsNamespaceDependencyCycle\r\n // Dependency cycles between namespaces must be avoided \r\n// in order to have a levelized and comprehensive design.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">WARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE MethodCa == 0 AND \r\n!IsPublic AND !IsEntryPoint AND \r\n!IsExplicitInterfaceImpl AND !IsClassConstructor AND !IsFinalizer \r\n// Detect unused methods. \r\n</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">WARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE TypeCa == 0 AND !IsPublic \r\n// Detect unused types. \r\n</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">WARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE SizeOfInst ==0 AND !IsStatic AND !IsGeneric AND !IsInterface \r\n// It indicate stateless types that might eventually be turned into static classes.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">WARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE DepthOfInheritance >= 6 ORDER BY DepthOfInheritance DESC \r\n // Branches too long in the derivation should be avoided.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">WARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE IsClass AND NbChildren ==0 AND !IsSealed ORDER BY NbLinesOfCode \r\n // Classes with no descendant should be sealed.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">WARN IF Percentage &gt; 15 IN SELECT ASSEMBLIES WHERE NormDistFromMainSeq &gt; 0.7 ORDER BY NormDistFromMainSeq DESC\r\n// See the NormDistFromMainSeq documentation for more info.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">WARN IF Count &gt; 0 IN SELECT TOP 10 ASSEMBLIES WHERE RelationalCohesion &lt; 1.5 OR RelationalCohesion &gt; 4.0\r\n// As classes inside an assembly should be strongly related, \r\n// the cohesion should be high. On the other hand, a value which is too high may \r\n// indicate over-coupling. A good range for RelationalCohesion is 1.5 to 4.0.</CQLQuery>
    </CQLGroup>
    <CQLGroup Name="Naming constraints" Active="True">
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">WARN IF Count &gt; 0 IN SELECT TOP 10 FIELDS WHERE NameLike "^m_" AND IsStatic\r\n// A static field should not be named 'm_XXX'</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">WARN IF Count &gt; 0 IN SELECT TOP 10 FIELDS WHERE NameLike "^s_" AND !IsStatic\r\n// A non-static field should not be named 's_XXX'</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">WARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE IsInterface AND !NameLike "^I" AND !IsNested \r\n// The name of a non-nested interface should begin with a 'I'</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">WARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE IsExceptionClass AND !NameLike "Exception$" \r\n// The name of an exception class should end with 'Exception'</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">WARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE IsAttributeClass AND !NameLike "Attribute$" \r\n// The name of an attribute class should end with 'Attribute'</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">WARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE \r\n !NameLike "^[A-Z]" AND // The name of a type should begin with an Upper letter.\r\n !NameLike "__StaticArrayInit" AND  // Except __StaticArrayInit generated type\r\n !NameLike "struct0x" AND           // Except struct0x generated type \r\n    !NameLike "&lt;"                      // Except C# compiler generated type</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">WARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE \r\n !NameLike "^[A-Z]" AND \r\n !(IsClassConstructor OR IsConstructor OR \r\n IsPropertyGetter  OR IsPropertySetter OR\r\n IsIndexerGetter OR IsIndexerSetter OR\r\n IsEventAdder OR IsEventRemover OR\r\n IsOperator)\r\n// The name of a regular method should begin with an Upper letter.</CQLQuery>
    </CQLGroup>
    <CQLGroup Name="Queries to understand code" Active="True">
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">SELECT TOP 50 TYPES ORDER BY TypeRank DESC\r\n// TypeRank values are computed by applying the Google PageRank \r\n// algorithm on the graph of types' dependencies \r\n// Types with high Rank are the most used ones.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">SELECT TOP 50 METHODS ORDER BY MethodRank DESC\r\n// MethodRank values are computed by applying the Google PageRank \r\n// algorithm on the graph of methods' dependencies\r\n// Methods with high Rank are the most used ones.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">SELECT TOP 50 NAMESPACES ORDER BY NamespaceCa DESC\r\n// The Afferent Coupling for a particular namespace is the number of namespaces that depends directly on it.\r\n// Namespaces with high Ca are the most used ones.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">SELECT TOP 50 TYPES ORDER BY TypeCa DESC\r\n// The Afferent Coupling for a particular type is the number of types that depends directly on it.\r\n// Types with high Ca are the most used ones.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">SELECT TOP 50 METHODS ORDER BY MethodCa DESC\r\n// The Afferent Coupling for a particular method is the number of methods that depends directly on it.\r\n// Methods with high Ca are the most used ones.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">SELECT TOP 50 NAMESPACES ORDER BY NamespaceCe DESC\r\n// The Efferent Coupling for a particular namespace is the number of namespaces it directly depends on.\r\n// Namespaces declared in Framework assemblies are taken account.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">SELECT TOP 50 TYPES ORDER BY TypeCe DESC\r\n// The Efferent Coupling for a particular type is the number of types it directly depends on.\r\n// Types declared in Framework assemblies are taken account.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">SELECT TOP 50 METHODS ORDER BY MethodCe DESC\r\n// The Efferent Coupling for a particular method is the number of methods it directly depends on.\r\n// Methods declared in Framework assemblies are taken account.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">SELECT ASSEMBLIES ORDER BY AssemblyLevel DESC\r\n// Classify assemblies by their Level values. \r\n// See the Level metric definition for more info.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">SELECT NAMESPACES ORDER BY NamespaceLevel DESC\r\n// Classify namespaces by their Level values. \r\n// See the Level metric definition for more info.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">SELECT TYPES ORDER BY TypeLevel DESC\r\n// Classify types by their Level values. \r\n// See the Level metric definition for more info.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">SELECT METHODS ORDER BY MethodLevel DESC\r\n// Classify methods by their Level values. \r\n// See the Level metric definition for more info.</CQLQuery>
    </CQLGroup>
  </CQLQueries><FormSettings MainWindowState="2" LocationX="-4" LocationY="-4" SizeWidth="1032" SizeHeight="746" SplitterDistance1="190" SplitterDistance2="335" SplitterDistance3="219" /></NDepend>